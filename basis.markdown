# 基础知识
在本章，我会带大家了解一些可能会在之后某些章节用到的知识。你可以把这章在最先前学习，也可以把这章当作一个库函数，在需要的时候再进行学习。那么，不管怎么样，我们开始吧！

## 大气的基本控制方程

## 量纲分析

## 张量表示法

### 张量
[维基链接](https://zh.wikipedia.org/wiki/%E5%BC%B5%E9%87%8F)

这个介绍看着复杂，而且不直观。为了方便你理解，你目前只需要记住：张量是矢量的一种推广状态。然后我将绕过张量复杂的定义，从我们的老熟人，线性代数，的角度向你解释这一说法。

先从矢量说起。矢量作为线性代数中的经典角色，从高中就开始配备我们能，相信大家都应该认识。一个n维向量可以表示为：$\vec A=(a_1, \cdots, a_n)$。他的每个分量 $a_i$代表对应坐标轴上的刻度或矢量在这个轴上的投影长度。我们此时就可以用张量偷懒一下，表示成 $a_n^1$，其中当n取不同的值时，表示矢量对应的元素，比如张量 $a_3$表示的就是矢量中的第三个元素。

再说线性代数中的另一个常客，矩阵。一个n维方阵可以表示成

$$
A = \begin{bmatrix}
a_{11} & a_{12} & \dots & a_{1n} \\
a_{21} & a_{22} & \dots & a_{2n} \\
\vdots & \vdots & \ddots & \vdots \\
a_{n1} & a_{n2} & \dots & a_{nn}
\end{bmatrix}
$$

那方阵能不能像矩阵一样用张量表示？还真可以。张量 $a_{ij}$就可以表示矩阵第i行第j列的元素。那这个张量的总体怎么表示呢？想必你也猜到了，就是 $a_{nm}^2$！以此类推，当上标为0的时候，张量表示的就是一个标量！

这是什么原理？你可以这样理解：对于矩阵，可以看成是一个二维面，而矢量是一维线，标量是0维点。那么，张量的上标表示的是其中的维，我们称之为**阶**；而下标n、m、o啥的，数量上首先要对应张量的维，另一方面，他们的最大值都是相等的，等于每个维对应的元素个数。也就是说，对于n阶m维的张量，可以表示一共 $m^n$个元素！这就是科学家们喜欢用张量的一个原因。

### 张量的符号表示
我们之前说了，张量的下标表示张量的元素。对于确定的下标，表示确定的元素。但是，如果看到一个下标张成这样的张量该怎么办呢？

$$ 
a_{i3}
$$

对于i的表示，根据我们之前的原则，我们是无法确认这个张量是怎么表示的。同时，如果我如果要表示一整行怎么办呢？难不成把那一行的所有元素都写一遍吗？这也太低效率了吧。所以，我们需要一个能高效表示的符号体系。为此，定义：

当张量表示为 $a_{inm}$（其中n和m为具体的数），即一个下标为不确定值，其余为确定值时，我们称那个不确定的值为**自由标号**。如果下标是自由标号，则认为此时张量表示取那一维度的所有元素。如果你学过python，并了解numpy，那就更好了，你可以把他看成是 `ndarray[:, n, m]`。

重复出现，且只能重复出现一次的下标符号称为**哑标**。哑标号在其方程内先罗列，再求和。即 $a_{mi}b_{ni}=a_{m1}b_{n1}+\cdots+a_{mk}b_{nk}$（其中m和n表示确定的数，k表示这个维度的元素数）。可以类比为numpy中的`(ndarray1[m, :]*ndarray2[n, :]).sum()`。这种表示方法也叫做**Einstein求和约定**。要保证这个运算能成立，我们还要保证同一个方程中自由标阶数要相同。不然的话不但在python中运算会报错，在现实中也会。

再举几个例子方便理解， $a_{ii}=\sum_{i=1}^{n}a_{ii}$； $a_{ij}b_{ij}=\sum_{i=1}^{n}\sum_{j=1}^{m}a_{ij}b_{ij}$（其中i，j都是哑标）。

由于在我们研究的范围是个三维的空间，因此后续我将默认张量的分量维度是3，也就是我们的张量和三阶魔方有相同的形状。

![三阶魔法，来源https://upload.wikimedia.org/wikipedia/commons/0/0d/%E4%B8%89%E9%98%B6%E9%AD%94%E6%96%B9_step0_6.png](https://upload.wikimedia.org/wikipedia/commons/0/0d/%E4%B8%89%E9%98%B6%E9%AD%94%E6%96%B9_step0_6.png)

### 张量的计算方法
单有Einstein求和约定并不能完全简化计算。比如在向量计算中常见的点乘运算，如果只用Einstein求和约定就无法表示。因为从单一个面来看，Einstein求和约定只能选取一条边上的分量，但点乘要求的是对角线上的分量。

因此，我们引入了Kronecker delta（ $\delta_{ij}$ ）。其可表示为

$$
\delta_{ij}=
\left\{
\begin{array}{l}
0, i\neq j \\
1, i=j
\end{array}
\right.
$$
这样，向量点积就可以表示为 $a\cdot b=\delta_{ij}a_{i}b_{j}$ 。

同理，为了方便表示外积，引入交换张量符号Epsilon标记（ $\epsilon_{ijk}$ ）。

为了解释这个符号，你需要再知道：

假如有一组递增的arange如 `np.arange(1, 5)=[1, 2, 3, 4]` ，如果把这个数列头尾相接 `[1, 2, 3, 4, 1, ......]` ，那么任意截取这个新数列的部分，构成的排列均是**偶排列**。同理，对于递减的arange `np.arange(4, 0, -1)=[4, 3, 2, 1]` ，这样从头尾相接的新数列截取的部分构成奇排列。

这样，Epsilon标记就可以表示为

$$
\epsilon_{ijk}=
\left\{
\begin{array}{l}
1, 偶排列 \\
-1, 奇排列 \\
0, 有重复的下标
\end{array}
\right.
$$

而外积可以表示为 $a\times b=\epsilon_{ijk}a_ib_j$。

同阶张量间可以进行加减，表示张量对应的各个元素分别相加/减，用python语法可以表示为 `array1+array2` 或 `array1-array2` 。




